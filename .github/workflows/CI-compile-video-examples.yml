# This workflow is to build video/NN examples and upload the binary files as artifacts.
# It is triggered on push or pull request events for specific paths related to video/NN examples.
# It also allows manual triggering via workflow_dispatch.

name: Build Video/NN Examples

on:
  push:
    branches:
      - 'dev-jenkins'
  #   paths:
  #   - '.github/workflows/CI-compile-video-examples.yml'
  #   - '.github/scripts/python/compile-video-examples.py'
  #   - '.github/scripts/python/bootstrap-linux-env.py'
  #   - '.github/scripts/python/bootstrap-macos-env.py'
  #   - '.github/scripts/python/bootstrap-windows-env.py'
  #   - 'project/realtek_amebapro2_v0_example/src/mmfv2_video_example/**'
  # pull_request:
  #   paths:
  #     - '.github/workflows/CI-compile-video-examples.yml'
  #     - '.github/scripts/python/compile-video-examples.py'
  #     - '.github/scripts/python/bootstrap-linux-env.py'
  #     - '.github/scripts/python/bootstrap-macos-env.py'
  #     - '.github/scripts/python/bootstrap-windows-env.py'
  #     - 'project/realtek_amebapro2_v0_example/src/mmfv2_video_example/**'

  workflow_dispatch:

jobs:
  build-all-examples:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [ubuntu-latest, macos-latest, windows-latest]
        batch:
          - id: batch1
            examples: "mmf2_video_example_v1_init mmf2_video_example_v2_init"
          - id: batch2
            examples: "mmf2_video_example_av_rtsp_mp4_init mmf2_video_example_joint_test_init"
          # - id: batch1
          #   examples: "mmf2_video_example_v1_init mmf2_video_example_v2_init mmf2_video_example_v3_init"
          # - id: batch2
          #   examples: "mmf2_video_example_av_rtsp_mp4_init mmf2_video_example_joint_test_init mmf2_video_example_joint_test_rtsp_mp4_init mmf2_video_example_2way_audio_pcmu_doorbell_init mmf2_video_example_2way_audio_pcmu_init mmf2_video_example_array_rtsp_init mmf2_video_example_v1_param_change_init mmf2_video_example_v1_day_night_change_init mmf2_video_example_v1_mask_init"
          # - id: batch3
          #   examples: "mmf2_video_example_v1_rate_control_init mmf2_video_example_av_mp4_httpfs_init mmf2_video_example_vipnn_rtsp_init mmf2_video_example_face_rtsp_init mmf2_video_example_fd_lm_mfn_sim_rtsp_init mmf2_video_example_joint_test_all_nn_rtsp_init mmf2_video_example_demuxer_rtsp_init mmf2_video_example_h264_pcmu_array_mp4_init mmf2_video_example_audio_vipnn_init"
          # - id: batch4
          #   examples: "mmf2_video_example_md_rtsp_init mmf2_video_example_md_mp4_init mmf2_video_example_bayercap_rtsp_init mmf2_video_example_md_nn_rtsp_init mmf2_video_example_joint_test_rtsp_mp4_init_fcs mmf2_video_example_vipnn_facedet_init mmf2_video_example_jpeg_external_init mmf2_video_example_vipnn_facedet_sync_init mmf2_video_example_vipnn_facedet_sync_snapshot_init"
          # - id: batch5
          #   examples: "mmf2_video_example_vipnn_handgesture_init mmf2_video_example_joint_test_vipnn_rtsp_mp4_init mmf2_video_example_vipnn_classify_rtsp_init mmf2_video_example_timelapse_mp4_init"

    steps:
      # Checkout the repository into a shorter subdirectory to control 
      # the folder depth and help avoid Windows path length issues
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: rtos
          
      # Avoid Windows path length limit
      - name: Move to short path
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir C:\r
          Copy-Item -Path "$env:GITHUB_WORKSPACE\rtos\*" -Destination "C:\r" -Recurse -Force
          echo "GITHUB_WORKSPACE=C:\r" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Set source path
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "SOURCE_ROOT=C:/r" >> $GITHUB_ENV
          else
            echo "SOURCE_ROOT=rtos" >> $GITHUB_ENV
          fi

      - name: Bootstrap Linux Environment
        if: runner.os == 'Linux'
        run: python3 ${{ env.SOURCE_ROOT }}/.github/scripts/python/bootstrap-linux-env.py

      - name: Bootstrap MacOS Environment
        if: runner.os == 'macOS'
        run: python3 ${{ env.SOURCE_ROOT }}/.github/scripts/python/bootstrap-macos-env.py

      - name: Bootstrap Windows Environment
        if: runner.os == 'Windows'
        run: python3 ${{ env.SOURCE_ROOT }}/.github/scripts/python/bootstrap-windows-env.py

      - name: Grant execute permission (Linux)
        if: runner.os == 'Linux'
        run: chmod +x ${{ env.SOURCE_ROOT }}/project/realtek_amebapro2_v0_example/GCC-RELEASE/mp/*.linux || true

      - name: Grant execute permission (macOS)
        if: runner.os == 'macOS'
        run: chmod +x ${{ env.SOURCE_ROOT }}/project/realtek_amebapro2_v0_example/GCC-RELEASE/mp/*.darwin || true

      - name: Grant execute permission (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem -Path "${{ env.SOURCE_ROOT }}/project/realtek_amebapro2_v0_example/GCC-RELEASE/mp/*.exe" -ErrorAction SilentlyContinue | ForEach-Object {
            icacls $_.FullName /grant Everyone:F
          }

      - name: Build all examples in batch (${{ runner.os }})
        if: runner.os != 'Windows'
        run: |
            examples=(${{ matrix.batch.examples }})
            for example in "${examples[@]}"; do
            echo "Building: $example"
            python3 ${{ env.SOURCE_ROOT }}/.github/scripts/python/compile-video-examples.py "$example" &
            done
            wait

      - name: Build all examples in batch (Windows)
        if: runner.os == 'Windows'
        shell: C:\Users\runneradmin\msys64_v10_3\msys64\usr\bin\bash.exe -l {0}
        run: |
          export MSYSTEM=MINGW64
          export TOOLCHAIN_PATH="/c/Users/runneradmin/toolchain/asdk-10.3.0/mingw32/newlib/bin"
          export CMAKE_PATH="/c/Program Files/CMake/bin"
          export PATH="$TOOLCHAIN_PATH:$CMAKE_PATH:/c/Users/runneradmin/msys64_v10_3/msys64/mingw64/bin:/c/Users/runneradmin/msys64_v10_3/msys64/usr/bin:$PATH"

          echo "Running in MSYS2"
          echo "PATH=$PATH"
          which cmake || echo "cmake not found"
          cmake --version || echo "cmake version failed"

          cd /c/r

          rm -rf build
          mkdir build

          for example in ${{ matrix.batch.examples }}; do
            echo "Building: $example"
            python3 -u ${{ env.SOURCE_ROOT }}/.github/scripts/python/compile-video-examples.py $example
          done

      - name: Build complete
        run: echo "Build finished. All examples in the batch have been processed."

      # To access output binaries outside msys shell
      - name: Copy output binaries to workspace
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/rtos/project/realtek_amebapro2_v0_example/bin_outputs"
          cp -v /c/r/rtos/project/realtek_amebapro2_v0_example/bin_outputs/*.bin \
          "${GITHUB_WORKSPACE}/rtos/project/realtek_amebapro2_v0_example/bin_outputs/" || true

      # Upload binaries to GitHub Artifacts
      - name: Upload binaries (${{ matrix.os }})
        uses: actions/upload-artifact@v4
        with:
          name: video-example-${{ matrix.os }}-${{ matrix.batch.id }}
          path: ${{ env.SOURCE_ROOT }}/project/realtek_amebapro2_v0_example/bin_outputs/*.bin

      # Run jenkinsfile to flash firware on hardware
      - name: Trigger Jenkins Job
        env:
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
        run: |
          RUN_ID=${{ github.run_id }}
          echo "Run ID: $RUN_ID"

          curl -X POST "https://e50d-128-106-168-7.ngrok-free.app/job/test-agent-job/buildWithParameters" \
            --user "$JENKINS_USER:$JENKINS_TOKEN" \
            --data-urlencode "RUN_ID=$RUN_ID"